name: Build and deploy Python app to Azure Web App - NombreDeTuApp

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  APP_NAME: 'NombreDeTuApp'
  RESOURCE_GROUP: 'MiGrupoRecursos'
  PYTHON_VERSION: '3.12'
  SLOT_NAME: 'Production'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Verify Python version
        run: |
          echo "Requested Python version: ${{ env.PYTHON_VERSION }}"
          python --version

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          check-latest: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3-dev \
            build-essential \
            libpq-dev \
            zlib1g-dev

      - name: Create and activate virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          echo "VIRTUAL_ENV=$PWD/venv" >> $GITHUB_ENV

      - name: Upgrade build tools
        run: |
          pip install --upgrade \
            pip \
            setuptools \
            wheel

      - name: Install Python dependencies
        run: |
          pip install \
            --no-cache-dir \
            --require-hashes \
            -r requirements.txt

      - name: Validate package structure
        run: |
          [ -f requirements.txt ] || { echo "ERROR: requirements.txt missing"; exit 1; }
          [ -f application.py ] || [ -f app.py ] || [ -f wsgi.py ] || { echo "ERROR: No application entry point found"; exit 1; }

      - name: Create deployment package
        run: |
          zip -r release.zip . \
            -x '*.git*' \
            -x '*venv*' \
            -x '*.github*' \
            -x '*.env*' \
            -x '*.vscode*' \
            -x '*.DS_Store*'

      - name: Verify zip contents
        run: |
          unzip -l release.zip | head -20
          [ $(unzip -l release.zip | grep -c 'requirements.txt') -eq 1 ] || { echo "ERROR: requirements.txt not in package"; exit 1; }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: release.zip
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: ${{ env.SLOT_NAME }}
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: python-app
          path: ${{ runner.temp }}

      - name: Verify Azure credentials
        run: |
          az account show || { echo "ERROR: Azure login failed"; exit 1; }

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_02E43350619E48469F30C128227CE94A }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_DD39528ED97F4C46A3F0E17E331A5863 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_E3FEA844A5044E738D70ADED21419B80 }}

      - name: Configure Web App (with retries)
        run: |
          for attempt in {1..3}; do
            echo "Attempt $attempt to configure web app"
            if az webapp config set \
              --name ${{ env.APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --linux-fx-version "PYTHON|${{ env.PYTHON_VERSION }}" \
              --always-on true; then
              echo "Configuration successful"
              break
            else
              echo "Attempt $attempt failed, waiting 30 seconds..."
              sleep 30
            fi
          done

          # Final verification
          az webapp config show \
            --name ${{ env.APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query "linuxFxVersion" || { echo "ERROR: Configuration verification failed"; exit 1; }

          echo "Waiting for SCM stabilization..."
          sleep 45

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        id: deploy-to-webapp
        with:
          app-name: ${{ env.APP_NAME }}
          package: ${{ runner.temp }}/release.zip
          slot-name: ${{ env.SLOT_NAME }}
          clean: true
          restart: false

      - name: Verify deployment
        run: |
          DEPLOYMENT_STATUS=$(az webapp deployment list-publishing-credentials \
            --name ${{ env.APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query "scmUri" -o tsv)
          
          echo "Deployment endpoint: $DEPLOYMENT_STATUS"
          [ -n "$DEPLOYMENT_STATUS" ] || { echo "ERROR: Deployment verification failed"; exit 1; }
